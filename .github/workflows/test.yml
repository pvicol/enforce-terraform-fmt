name: Run tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Test failure on no Terraform version
        id: fail_no_version
        continue-on-error: true
        uses: ./

      - name: No Terraform version test failed
        if: steps.fail_no_version.outcome != 'failure'
        run: exit 1

      - name: Test failure on invalid Terraform version
        id: fail_invalid_version
        continue-on-error: true
        uses: ./
        with:
          terraform_version: asdf

      - name: Invalid Terraform version test failed
        if: steps.fail_invalid_version.outcome != 'failure'
        run: exit 1

      - name: Test failure on missing Terraform version
        id: fail_missing_version
        continue-on-error: true
        uses: ./
        with:
          terraform_version: 999.999.999

      - name: Missing Terraform version test failed
        if: steps.fail_missing_version.outcome != 'failure'
        run: exit 1

      - name: Munge `test.tf` for a failing commit
        run: sed -i '2s/^[ \t]*//' test.tf

      - name: Commit the munged `test.tf`
        run: |
          git add . 
          git commit -m "Running tests"

      - name: Test failure
        id: failure_step
        continue-on-error: true
        uses: ./
        with:
          terraform_version: 0.14.6

      - name: Failure test failed
        if: steps.failure_step.outcome != 'failure'
        run: exit 1

      - name: Commit the newly formatted files
        run: |
          git add . 
          git commit -m "Running tests"

      - name: Test success on the new commit
        uses: ./
        with:
          terraform_version: 0.14.6

  check_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag already exists
        run: |
          git fetch --tags
          TAG=$(cat VERSION)
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
            exit 1
          fi
